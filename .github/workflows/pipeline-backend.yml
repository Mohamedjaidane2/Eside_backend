name: Eside Backend Pipeline

on:
  push:
    branches:
      - ci/pipeline
    paths:
      - account/**
      - advertisment/**
      - auth/**
      - config-server/**
      - discovery/**
      - EmailSender/**
      - gateway/**
      - Order/**
      - payment/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml

env:
  MODULES: "EmailSender/EmailSender Order/Order account/account advertisment/advertisment auth/auth config-server/config-server discovery/discovery gateway/gateway payment/payment"

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile projects
        run: |
          for module in ${{ env.MODULES }}; do
            echo "---------- $module ----------"
            cd $module
            echo "Compiling the code..."
            mvn compile
            echo "Compile complete."
            cd ..
            cd ..
          done

  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build project
        run: |
          for module in ${{ env.MODULES }}; do
            echo "----------------------------------------------------- $module --------------------------------------------------------------------------"
            cd $module
            echo "Building the code..."
            mvn package -DskipTests
            echo "Build complete."

            JAR_FILE=$(find target -name "*.jar")
            if [ -z "$JAR_FILE" ]; then
              echo "ERROR: No JAR file found for $module"
              exit 1
            else
              echo "JAR file $JAR_FILE successfully built for $module"
            fi

            cd ..
            cd ..
          done

  build-image:
    runs-on: ubuntu-latest
    needs: [build]
    name: Build Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Login to DOCKER_HUB
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & push Docker images
        run: |
          echo "Modules: ${{ env.MODULES }}"
          echo "Docker Hub Username: ${{ secrets.DOCKER_HUB_USERNAME }}"
          for module in ${{ env.MODULES }}; do
            echo "----------------------------------------------------- $module --------------------------------------------------------------------------"
            cd $module || { echo "Failed to navigate to $module"; exit 1; }
            echo "Copying JAR file for Docker build context..."
            ls -l
            if [ ! -d "target" ]; then
              echo "Error: 'target' directory not found in $module"
              exit 1
            fi
            ls -l target/
            JAR_FILE=$(find target -name "*.jar" ! -name "*.jar.original")
            if [ -z "$JAR_FILE" ]; then
              echo "No JAR file found in target directory for module $module"
              exit 1
            fi
            echo "JAR file to be copied: $JAR_FILE"
            cp $JAR_FILE . || { echo "Failed to copy JAR file for module $module"; exit 1; }
          
            echo "Building Docker image..."
            module_name=$(basename $module | tr '[:upper:]' '[:lower:]')
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${module_name}:latest . || { echo "Failed to build Docker image for $module"; exit 1; }
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${module_name}:latest || { echo "Failed to push Docker image for $module"; exit 1; }
            echo "Docker image for $module pushed to Docker Hub."
            cd ../..
          done

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-image ]
    name: Deploy Backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: create deployment folder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            mkdir -p ci-cd

      - name: Copy Docker Compose to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.yml"  # Path to your Docker Compose file
          target: "~/ci-cd"  # Destination directory on the remote server
      - name: Set ENV variable and deploy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ci-cd
            docker compose -f docker-compose.yml pull -q
            docker compose -f docker-compose.yml up -d
            EOF